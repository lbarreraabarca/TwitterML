{
  "name": "construx",
  "version": "1.0.0",
  "description": "A plugin-based development mode middleware for krakenjs",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js",
    "cover": "nyc npm test && nyc report",
    "lint": "jshint -c .jshintrc index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/krakenjs/construx.git"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "keywords": [
    "node",
    "javascript",
    "kraken"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "contributors": [
    {
      "name": "Jean-Charles Sisk",
      "email": "jeancharles@paypal.com"
    },
    {
      "name": "Jeff Harrell",
      "email": "jeharrell@paypal.com"
    },
    {
      "name": "Matt Edelman",
      "email": "medelman@paypal.com"
    }
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "dependencies": {
    "async": "^0.2.7",
    "concat-stream": "^1.4.4",
    "debuglog": "^1.0.1",
    "minimatch": "^0.2.14",
    "mkdirp": "^0.3.5",
    "n-deep-merge": "0.0.1",
    "rimraf": "^2.2.6"
  },
  "devDependencies": {
    "express": "^3.4.0",
    "jshint": "~2.4.3",
    "nyc": "^2.3.0",
    "supertest": "^0.11.0",
    "tap": "^1.2.1"
  },
  "readme": "construx\n========\n\nLead Maintainer: [Matt Edelman](https://github.com/grawk)  \n\n[![Build Status](https://travis-ci.org/krakenjs/construx.svg?branch=master)](https://travis-ci.org/krakenjs/construx)  \n[![NPM version](https://badge.fury.io/js/construx.png)](http://badge.fury.io/js/construx)  \n\nCompile-on-the-fly and other development tools for use when building [express](http://expressjs.com/) applications.\n\n## Middleware compiler\n\nThe middleware compiler builds your dependencies as they are requested, allowing you to run your express application as-is and not have to set up a watch task.\n\n\n### General Usage\n\n```js\nvar app = require('express')(),\n    construx = require('construx');\n\napp.use(construx(/* src, dest [, config] */));\n```\n\n### Parameters\n\n`src` - The directory of your source files  \n`dest` - The destination directory for the compiled files  \n`config` - Optional. An object of compilers to enable  \n\n\n\n### Configuration\n\nTo enable a plugin, add it to the config object as follows:\n\n```json\n{\n    \"less\": {\n        \"module\": \"construx-less\",\n        \"files\": \"/css/**/*.css\",\n        \"ext\": \"less\"\n    }\n}\n```\n\n_Note: above you also would have the `construx-less` construx plugin installed in your project_\n\n### KrakenJS Usage\n\nKrakenJS uses [confit](https://github.com/krakenjs/confit) and [meddleware](https://github.com/krakenjs/meddleware) to configure and manage middleware registration. To use `construx` as a\nkrakenjs development tool, add the following to your application's `middleware` section in `development.json`\n\n```js\n\"construx\": {\n    \"enabled\": true,\n    \"priority\": 35,\n    \"module\": {\n        \"name\": \"construx\",\n        \"arguments\": [\n            \"path:./public\",\n            \"path:./.build\",\n            {\n                \"css\": {\n                    \"module\": \"construx-less\",\n                    \"files\": \"/css/**/*.css\"\n                },\n                \"copier\": {\n                    \"module\": \"construx-copier\",\n                    \"files\": \"**/*\"\n                }\n            }\n        ]\n    }\n}\n```\n\nThis will engage the `construx` middleware only for the development environment. Note that the two configured plugins are as\nan example and your actual plugin set will depend upon your application.\n### Existing plugins\n\nPlease rely upon the individual plugins' README for configuration and other requirements information.\n\n* [construx-copier](https://github.com/krakenjs/construx-copier/blob/master/README.md) - copier for static assets\n* [construx-dust](https://github.com/krakenjs/construx-dust/blob/master/README.md) - DustJS template compiler\n* [construx-less](https://github.com/krakenjs/construx-less/blob/master/README.md) - Less CSS compiler\n* [construx-sass](https://github.com/krakenjs/construx-sass/blob/master/README.md) - Sass CSS compiler\n* [construx-stylus](https://github.com/krakenjs/construx-stylus/blob/master/README.md) - Stylus CSS compiler\n\n### How plugins work\n\nA plugin usually would wrap a build step for a particular technology. E.g. [construx-dustjs](https://github.com/krakenjs/construx-dustjs) \nwraps the dustjs template compilation build step. This allows on-the-fly dust template changes to be reflected immediately during \ndevelopment of your application. Other examples of plugins would be CSS compilers such as Less, Sass, or Stylus.\n\n#### Plugin registration\n\n```js\n{\n    \"<plugin key>\": {\n        \"module\": \"<plugin module name>\",\n        \"files\": \"<filter on request path>\",\n        \"ext\": \"<file extension>\",\n        \"precompile\": <Function>,\n        \"postcompile\": <Function>\n    }\n}\n```\n* `<plugin key>` just needs to be a unique string within the other registered plugins.\n* `module` is the npm package name of your plugin.\n* `files` is a glob string which will try and match the `req.path`. If there is a match, the plugin middleware will be engaged\n* `ext` (optional) is a replacement for the requested file's extension. E.g. if a `GET` request comes across for `/css/foo.css`, and `ext` is \nset to `less`, the construx middleware will attempt to find a file named `<files source path>/foo.less`\n* `precompile` (optional) is a function that can run prior to the construx middleware execution for this plugin. Its signature is \n `(context, callback)`. Please see description of compile `context` below.\n* `postcompile` (optional) is a function that will run post construx middleware execution for this plugin. Its signature is `(context, callback)`. \nA possible use case for `postcompile` would be if the plugin creates any temporary files/directories during compilation that should be deleted.\n\n#### Middleware process a matched request\n\nWhen a `req.path` is matched to a plugin, construx middleware will open the matched file (using `fs.readFile`) and call that plugin's compiler:\n\n```js\ncompiler(raw, config, function (err, result) {\n...\n```\n\nThe `config` argument is:\n\n```js\n{\n    paths: dirs, \n    context: context,\n    <options>\n}\n```\n* `paths` is an array of lookup paths based on the difference between the filesystem root of the current plugin's files and the \n currently requested file. E.g. if the request is for `/css/foo/bar/bang.css` the `paths` array will be: `['<root css path>/', \n '<root css path>/foo/', '<root css path>/foo/bar/']`. Use this array in your plugin according to need.\n* `context` is passed through all compile steps and its initial form is:\n\n```js\ncontext = {\n    srcRoot: <configured src root>,\n    destRoot: <configured dest root>,\n    filePath: <usually just req.path>,\n    name: <filePath minus file extension>,\n    ext: <options.ext, if set>\n};\n```\n\n_Note: There are a couple possible overrides to the context object which you might want to take advantage of. See below._\n\n* `<options>` is the JSON object used to register the plugin (see #Plugin-registration above).\n\nThe plugin's compiler will do whatever transformation to the raw buffer, and issue a `callback` to the construx middleware \nwith the transformed file (or an error).\n\n#### context overrides\n\n`srcPath`: If you want to compute the source file differently than the construx middleware, you can add `srcPath` to the \ncontext object (in a `precompile` step usually) and the construx middleware will use your value instead of its own logic\n`skipRead`: If you don't want the construx middleware to open the source file (because for example, your compiler does that instead) \nthen set the `skipRead` flag to be true\n\n### Author a plugin\n\nWe have created a template for construx plugins: [construx-star](https://github.com/krakenjs/construx-star). The template\nincludes the basic pattern of a plugin, preferred unit test/coverage modules, preferred `npm run` aliases, and license (Apache 2.0).\nYou can create a blank github repository and import `construx-star` as a starting point.\n\n* If you are developing a plugin as a 3rd party (i.e. not as a PayPal employee), please be sure to remove the PayPal specific license block\nat the top of each JavaScript file.\n* Please use the naming convention `construx-<wrapped compiler>`\n\nIf you author and publish a `construx` plugin, please let us know so we can add it to our [existing plugins](#existing-plugins) list.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/krakenjs/construx/issues"
  },
  "_id": "construx@1.0.0",
  "_from": "construx@^1.0.0"
}
